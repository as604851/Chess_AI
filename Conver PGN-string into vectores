import numpy as np  # Imported but not used in the script
import csv  # For writing data to a CSV file

# Class to represent a simplified version of a chessboard
class ChessBoard:
    def __init__(self):
        # Initialize an 8x8 board with '.' to represent empty squares
        self.board = [['.' for _ in range(8)] for _ in range(8)]
        # Start with White's turn
        self.turn = 'White'

    def get_vector(self):
        # Convert the board into a flat vector with numeric values representing pieces
        piece_to_num = {
            '.': 0, 'p': 1, 'P': -1, 'n': 2, 'N': -2, 'b': 3, 'B': -3,
            'r': 4, 'R': -4, 'q': 5, 'Q': -5, 'k': 6, 'K': -6
        }
        # Flatten the board and convert each piece to its corresponding number
        board_vector = [piece_to_num.get(piece, 0) for row in self.board for piece in row]
        # Add a single value to represent whose turn it is (0 for White, 1 for Black)
        turn_vector = [0] if self.turn == 'White' else [1]
        # Return the combined vector
        return board_vector + turn_vector

    def update_board(self, piece, square):
        # Convert algebraic notation (e.g., "e4") to board indices
        file = ord(square[0]) - ord('a')  # Column index (a-h to 0-7)
        rank = 8 - int(square[1])         # Row index (1-8 to 7-0)
        # Place the piece on the board at the calculated position
        self.board[rank][file] = piece
        # Switch the turn to the other player
        self.turn = 'Black' if self.turn == 'White' else 'White'

# Assign the case of the piece depending on which player's move it is
# White pieces are lowercase, Black pieces are uppercase in this system
def assign_case(piece, is_white):
    return piece.lower() if is_white else piece.upper()

# Translate game result into a label format used for CSV
def result_to_string(result):
    if result == '0-1':
        return '.....0-1.......'  # Black wins
    elif result == '1-0':
        return '.....1-0.......'  # White wins
    else:
        return '................'  # Draw

# Process all moves and save them as board state vectors with labels
def process_moves(moves):
    result = moves[-1]      # Last element is the result (e.g., "1-0")
    moves = moves[:-1]      # Remove the result from the list

    board = ChessBoard()    # Create a new game board

    with open('chess_data2.csv', 'w', newline='') as file:
        writer = csv.writer(file)
        # Write column headers: 64 for the board + 1 for the label
        writer.writerow([f"Cell_{i}" for i in range(64)] + ["Label"])

        for move in moves:
            # Determine the piece: if move is two characters (e.g. "e4"), it's a pawn move
            piece = 'p' if len(move) == 2 else move[0]
            # Set the case based on current player's turn
            piece = assign_case(piece, board.turn == 'White')
            # Get the target square (last two characters of the move)
            square = move[-2:]

            # Validate square format
            if square[0] in 'abcdefgh' and square[1] in '12345678':
                # Update the board with the piece at the specified square
                board.update_board(piece, square)

                # Get the current board state vector
                vector = board.get_vector()
                # Convert the game result into a label
                label = result_to_string(result)

                # Convert the vector of integers to strings for writing
                vector_str = list(map(str, vector))

                # Write the board state and result label to the CSV
                writer.writerow(vector_str + [label])
            else:
                print(f"Invalid move: {move}")  # Print a warning for invalid inputs

# Read moves from a file (each move separated by whitespace)
def read_moves_from_file(file_path):
    with open(file_path, 'r') as file:
        moves = file.read().split()
    return moves

# Main function to run the script
def main():
    file_path = r"file_path"  # Replace with actual path to your input file
    moves = read_moves_from_file(file_path)
    process_moves(moves)

# Entry point of the script
if __name__ == "__main__":
    main()
